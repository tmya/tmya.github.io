<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>tmya note - MIRACLE LINUX</title><link href="https://tmya.github.io/" rel="alternate"></link><link href="https://tmya.github.io/feeds/miracle-linux.atom.xml" rel="self"></link><id>https://tmya.github.io/</id><updated>2022-03-04T00:00:00+09:00</updated><entry><title>Byobuのインストール - MIRACLE LINUX 8.4</title><link href="https://tmya.github.io/how-to-install-byobu.html" rel="alternate"></link><published>2022-03-04T00:00:00+09:00</published><updated>2022-03-04T00:00:00+09:00</updated><author><name>Akio Tomita</name></author><id>tag:tmya.github.io,2022-03-04:/how-to-install-byobu.html</id><summary type="html">&lt;p&gt;&lt;a href="https://www.byobu.org/"&gt;Byobu&lt;/a&gt;とは、CUIで使用できるウィンドウマネージャ・ターミナルマルチプレクサです。使い道の例として、SSH接続の不調に …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.byobu.org/"&gt;Byobu&lt;/a&gt;とは、CUIで使用できるウィンドウマネージャ・ターミナルマルチプレクサです。使い道の例として、SSH接続の不調による切断から作業状態を守ることができます。作業中にネットワークが不調になり切断されてしまった場合に、通常は作業途中の状態が消えてしまいますが、Byobuを起動してその中のターミナルで作業を行っていると切断されてもByobuは起動したままなので、再接続時に作業を継続できるようになります。&lt;/p&gt;
&lt;h3&gt;前提&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;EPELリポジトリが使えること&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使えない場合は&lt;a href="https://www.cybertrust.co.jp/blog/linux-oss/linux/miraclelinux84-repository.html"&gt;MIRACLE LINUX 8.4 でいろんなリポジトリを使ってみよう｜BLOG｜サイバートラスト&lt;/a&gt;の下の方に記載の方法で使えるようにしましょう。コマンド一発です。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;インストール&lt;/h3&gt;
&lt;p&gt;インストールはとっても簡単。インストールの続行を問われるので、&lt;code&gt;y&lt;/code&gt;を入力して&lt;code&gt;Enterキー&lt;/code&gt;をプッシュ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo dnf install byobu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;一緒に&lt;code&gt;screen&lt;/code&gt;がインストールされます。Byobuはscreenをバックエンドに使い、機能を拡張しています。設定を行なえばバックエンドにtmuxも使えるよ。&lt;/p&gt;
&lt;h3&gt;使い方&lt;/h3&gt;
&lt;p&gt;Byobuは仮想的にCUIの中に複数のウィンドウを開いて並べることができます。&lt;/p&gt;
&lt;h4&gt;起動方法&lt;/h4&gt;
&lt;p&gt;コマンドを実行すると新しいターミナルが立ち上がります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ byobu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;この状態でいろいろな作業を行うことができます。&lt;/p&gt;
&lt;h4&gt;操作方法&lt;/h4&gt;
&lt;p&gt;公式の説明は&lt;a href="https://www.byobu.org/documentation"&gt;Byobu - Documentation&lt;/a&gt;にあります。私の適当な説明は下記に記載。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;キーボードのボタン&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;F2&lt;/td&gt;
&lt;td&gt;新しいウィンドウを開く&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F3&lt;/td&gt;
&lt;td&gt;前のウィンドウに切り換える&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F4&lt;/td&gt;
&lt;td&gt;次のウィンドウに切り換える&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F5&lt;/td&gt;
&lt;td&gt;プロファイルを再読み込みする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F6&lt;/td&gt;
&lt;td&gt;Byobuを起動したままByobuから離れる（ログアウトするかも）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F7&lt;/td&gt;
&lt;td&gt;スクロールモードに移る（カーソルキーで画面の上に消えていったメッセージを見ることができる。Enterキーで離脱可。）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F8&lt;/td&gt;
&lt;td&gt;今のウィンドウの名前を変更する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F9&lt;/td&gt;
&lt;td&gt;設定メニューを表示する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift + F2&lt;/td&gt;
&lt;td&gt;上下に現在のウィンドウを分割する（一つのウィンドウに上下分割で二つのセッション）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + F2&lt;/td&gt;
&lt;td&gt;左右に現在のウィンドウを分割する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift + F3&lt;/td&gt;
&lt;td&gt;分割したウィンドウの中で前のウィンドウを選択&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift + F4&lt;/td&gt;
&lt;td&gt;分割したウィンドウの中で次のウィンドウを選択&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift + F5&lt;/td&gt;
&lt;td&gt;分割を結合？（詳細不明）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + F5&lt;/td&gt;
&lt;td&gt;GPGとSSHソケットに再接続する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift + F6&lt;/td&gt;
&lt;td&gt;Byobuを起動したままByobuから離れる（ログアウトしない）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + F6&lt;/td&gt;
&lt;td&gt;現在のウィンドウの分割を削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt + Page Up&lt;/td&gt;
&lt;td&gt;スクロールモードに移る&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt + Page Down&lt;/td&gt;
&lt;td&gt;スクロールモードに移る&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + a の後に $&lt;/td&gt;
&lt;td&gt;詳細ステータスを表示（となっているけどセッション名変更になる）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + a の後に R&lt;/td&gt;
&lt;td&gt;プロファイルの再読み込み&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + a の後に !&lt;/td&gt;
&lt;td&gt;キーバインディングのON/OFF切り替え&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + a の後に k&lt;/td&gt;
&lt;td&gt;現在のウィンドウをkillする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + a の後に~&lt;/td&gt;
&lt;td&gt;今のウィンドウのスクロールバッファを保存する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;簡単に使うためには&lt;/h4&gt;
&lt;p&gt;あまり深く考えずにbyobuを起動して作業を行い、作業途中で&lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;F6&lt;/code&gt;でデタッチをすれば、次にbyobuを起動した時に前回の続きから作業を行うことができます。&lt;/p&gt;
&lt;h4&gt;メモ&lt;/h4&gt;
&lt;p&gt;さて、SSHで接続した時に作業開始と共にbyobuを起動することを忘れたりします。忘れないようにSSH接続した時に自動でbyobuを起動するにように設定するには下記の通りにコマンドを実行します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ byobu-enable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;次回、SSHでログインした時に自動でbyobuが実行されるはずです。&lt;/p&gt;</content><category term="MIRACLE LINUX"></category></entry><entry><title>google-drive-ocamlfuseのインストール - MIRACLE LINUX 8.4</title><link href="https://tmya.github.io/how-to-install-google-drive-ocamlfuse.html" rel="alternate"></link><published>2022-02-12T00:00:00+09:00</published><updated>2022-02-12T00:00:00+09:00</updated><author><name>Akio Tomita</name></author><id>tag:tmya.github.io,2022-02-12:/how-to-install-google-drive-ocamlfuse.html</id><summary type="html">&lt;p&gt;GoogleドライブをMIRACLE LINUXでも使いたい。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/astrada/google-drive-ocamlfuse"&gt;google-drive-ocamlfuse - Github&lt;/a&gt;を信じられる人向け。&lt;/p&gt;
&lt;h3&gt;前提&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Homebrewが使用可能&lt;/li&gt;
&lt;li&gt;インストールは&lt;a href="https://brew.sh/index_ja"&gt;公式サイト&lt;/a&gt;に倣えば簡 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;GoogleドライブをMIRACLE LINUXでも使いたい。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/astrada/google-drive-ocamlfuse"&gt;google-drive-ocamlfuse - Github&lt;/a&gt;を信じられる人向け。&lt;/p&gt;
&lt;h3&gt;前提&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Homebrewが使用可能&lt;/li&gt;
&lt;li&gt;インストールは&lt;a href="https://brew.sh/index_ja"&gt;公式サイト&lt;/a&gt;に倣えば簡単。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;手順&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;opamのインストールと初期設定&lt;/li&gt;
&lt;li&gt;google-drive-ocamlfuseのインストール&lt;/li&gt;
&lt;li&gt;google-drive-ocamlfuseの起動と設定&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;opamのインストールと初期設定&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ brew install opam
$ opam init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;少し待つと、&lt;code&gt;Do you want opam to modify ~/.bash_profile? [N/y/f]&lt;/code&gt;とか聞かれるので、&lt;code&gt;y&lt;/code&gt;を入力してからEnter。その後数分待ちます。最後に&lt;code&gt;Done&lt;/code&gt;と表示されて完了です。&lt;/p&gt;
&lt;h2&gt;google-drive-ocamlfuseのインストール&lt;/h2&gt;
&lt;p&gt;下記コマンドを実行します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ opam install google-drive-ocamlfuse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;Do you want to continu? [Y/n]&lt;/code&gt;と聞かれるのでそのままEnter。&lt;/p&gt;
&lt;p&gt;しかしここで&lt;code&gt;conf-gmp&lt;/code&gt;, &lt;code&gt;conf-libcurl&lt;/code&gt;, &lt;code&gt;conf-libfuse&lt;/code&gt;のインストールに失敗してしまいました。必要なパッケージをインストールします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo dnf install libcurl-devel fuse-devel gmp-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;【2022/2/18追記】別のマシンではconf-sqlite3も必要だったので、追加でパッケージインストールが必要かもしれません。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo dnf install sqlite-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;もう一度google-drive-ocamlfuseをインストールします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ opam install google-drive-ocamlfuse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;今回は成功しました。下記のコマンドを実行すると環境変数が今のシェルに読み込まれます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;opam env&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;google-drive-ocamlfuseの起動と設定&lt;/h2&gt;
&lt;p&gt;初回起動でgoogleの認証を行います。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ google-drive-ocamlfuse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ブラウザが立ち上がり、Googleアカウントでのログインが促されるのでログインします。Google Driveへのアクセスが要求されます。サードパーティのソフトウェアなので、信じるかどうかは各自で判断するしかありません。&lt;/p&gt;
&lt;p&gt;ログインして正常に通信が行われていればコンソールに下記のようなメッセージが表示されます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Access token retrieved correctly.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ユーザのホームディレクトリ直下にフォルダを作り、そこにマウントします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ mkdir ~/googledrive
$ google-drive-ocamlfuse ~/googledrive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;マウントが完了してファイル操作が可能になります。&lt;/p&gt;</content><category term="MIRACLE LINUX"></category></entry><entry><title>Synology Drive Clientのインストール - MIRACLE LINUX 8.4</title><link href="https://tmya.github.io/how-to-install-synology-drive-client.html" rel="alternate"></link><published>2021-12-09T00:00:00+09:00</published><updated>2021-12-09T00:00:00+09:00</updated><author><name>Akio Tomita</name></author><id>tag:tmya.github.io,2021-12-09:/how-to-install-synology-drive-client.html</id><summary type="html">&lt;p&gt;&lt;img alt="SynologyDrive起動画面" src="https://tmya.github.io/images/synology-logo.jpg"&gt;&lt;/p&gt;
&lt;p&gt;SynologyのNAS(DS220j)を手に入れたので、MIRACLE LINUXにSynology Drive Clientをインストールして他のマシンとファイルを同期しよう。&lt;/p&gt;
&lt;h3&gt;前提知識&lt;/h3&gt;
&lt;p&gt;ダウン …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="SynologyDrive起動画面" src="https://tmya.github.io/images/synology-logo.jpg"&gt;&lt;/p&gt;
&lt;p&gt;SynologyのNAS(DS220j)を手に入れたので、MIRACLE LINUXにSynology Drive Clientをインストールして他のマシンとファイルを同期しよう。&lt;/p&gt;
&lt;h3&gt;前提知識&lt;/h3&gt;
&lt;p&gt;ダウンロードはSynologyのサイトのサポートから可能ですが、Linux系のディストリビューションとしてはUbuntu向けしか提供されていません。何とかしてUbuntu向けのパッケージを使ってインストールしたいと思います。その為にdebファイルをrpmファイルに変換するalienというプログラムをインストールして使用します。またパッケージを作成する際のファイル所有者の問題を解決するために、fakerootもインストールしましょう。MIRACLE LINUXの&lt;strong&gt;GUI環境&lt;/strong&gt;で操作することを想定しています。&lt;/p&gt;
&lt;h3&gt;手順&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Synology Drive Clientのダウンロード&lt;/li&gt;
&lt;li&gt;dnfでEPELを有効にする(未実施の場合)&lt;/li&gt;
&lt;li&gt;alienとfakerootのインストール&lt;/li&gt;
&lt;li&gt;DEBからRPMへの変換&lt;/li&gt;
&lt;li&gt;Synology Drive Clientのインストール&lt;/li&gt;
&lt;li&gt;[2021/12/24 追記]OSアップデートの際に必要なこと&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Synology Drive Clientのダウンロード&lt;/h3&gt;
&lt;p&gt;Synologyのサイトからダウンロードします。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.synology.com/ja-jp/support/download/DS220j?version=7.0#utilities"&gt;デスクトップ ユーティリティ - Synology&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Synology Drive Client&lt;/code&gt;の右側の&lt;code&gt;ダウンロード&lt;/code&gt;をクリックして、&lt;code&gt;Ubuntu (64 bits, deb)&lt;/code&gt;の右側の&lt;code&gt;ダウンロード&lt;/code&gt;リンクをクリックしてダウンロードします。&lt;/p&gt;
&lt;h3&gt;dnfでEPELを有効にする(未実施の場合)&lt;/h3&gt;
&lt;p&gt;alienはEPELに存在するのでEPELを使えるようにします。すでにEPELを使えている方はこの手順は不要です。&lt;/p&gt;
&lt;p&gt;EPELの有効化については、サイバートラストのサイトに&lt;a href="https://www.cybertrust.co.jp/blog/linux-oss/linux/miraclelinux84-repository.html"&gt;説明が載っています&lt;/a&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;alienとfakerootのインストール&lt;/h3&gt;
&lt;p&gt;dnfを使ってalienをインストールします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo dnf install alien fakeroot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;DEBからRPMへの変換&lt;/h3&gt;
&lt;p&gt;fakerootを使うので下記のようなコマンドとオプションになります。&lt;code&gt;-r&lt;/code&gt;はrpmへ変換。&lt;code&gt;-c&lt;/code&gt;はスクリプトを含む。rpmはカレントディレクトリに出来上がります。&lt;strong&gt;2021/12/10追記: -cは要らなかった&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ fakeroot alien -r ./Downloads/synology-drive-client-12682.x86_64.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Synology Drive Clientのインストール&lt;/h3&gt;
&lt;p&gt;rpmコマンドでインストールします。&lt;code&gt;dnf localinstall&lt;/code&gt;でも可能と思いますが試していません。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo rpm -ivh ./synology-drive-7.0.2-12683.x86_64.rpm --nodeps --force
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;インストールが完了するとアプリケーションメニューに表示されているのでクリックして起動します。下記の写真はgnome classicですがgnome3でもほとんど同じだと思います。&lt;/p&gt;
&lt;p&gt;&lt;img alt="SynologyDriveClientのアイコン" src="https://tmya.github.io/images/menu-synology-drive.jpg"&gt;&lt;/p&gt;
&lt;p&gt;起動後は通常通り使えるので設定を行い終了です。&lt;/p&gt;
&lt;h3&gt;OSアップデートの際に必要なこと&lt;/h3&gt;
&lt;p&gt;上記で&lt;code&gt;--nodeps&lt;/code&gt;と&lt;code&gt;--force&lt;/code&gt;オプションを使ってインストールしているため、システムの依存関係をまったく無視してしまっています。その為、OSのアップデートの際に何かしらが競合してアップデートできない状態になります。一旦Synology Driveを終了し、アンインストールしてOSアップデートを行い、再度Synology Driveをインストールする手順で回避します。接続設定等は消えずに残るようなのでそこまで大変ではないと思います。&lt;/p&gt;
&lt;h4&gt;Synology Driveの終了&lt;/h4&gt;
&lt;p&gt;GUIから終了できないので、コマンドから終了します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;kill&lt;/span&gt; -TERM &lt;span class="sb"&gt;`&lt;/span&gt;pgrep cloud-drive-ui&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Synology Driveのアンインストール&lt;/h4&gt;
&lt;p&gt;RPMを削除します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo rpm -e synology-drive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;OSのアップデート&lt;/h4&gt;
&lt;p&gt;ここでシステムのアップデートを行います。GUIであれば&lt;code&gt;アプリケーション&lt;/code&gt;→&lt;code&gt;システムツール&lt;/code&gt;→&lt;code&gt;ソフトウェア&lt;/code&gt;を選び、アップデートタブからアップデートを行います。CUIであれば&lt;code&gt;$ sudo dnf update&lt;/code&gt;と実行します。&lt;/p&gt;
&lt;h4&gt;再度Synology Driveのインストール&lt;/h4&gt;
&lt;p&gt;インストール時と同じコマンドでインストールします。作成したrpmを削除してしまっていたらrpmを作成する所から作業します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo rpm -ivh ./synology-drive-7.0.2-12683.x86_64.rpm --nodeps --force
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;インストールが完了したら&lt;code&gt;アプリケーション&lt;/code&gt;→&lt;code&gt;インターネット&lt;/code&gt;→&lt;code&gt;Synology Drive Client&lt;/code&gt;を実行します。もしかしたら2回起動しないとUI画面が表示されないかもしれません。接続設定等が維持されていると思います。以上で完了です。&lt;/p&gt;
&lt;h4&gt;試行錯誤メモ&lt;/h4&gt;
&lt;p&gt;いろいろ試してみたけど諦めたやつ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo rpm -ivh ./synology-drive-7.0.2-12683.x86_64.rpm --nodeps --force --relocate /&lt;span class="o"&gt;=&lt;/span&gt;/opt/synology-drive --badreloc
sudo micro /opt/synology-drive/usr/bin/synology-drive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="MIRACLE LINUX"></category></entry><entry><title>WSL2にMIRACLE LINUX 8.4(CUI)を導入してSLを走らせる</title><link href="https://tmya.github.io/miracle-linux-tips-deploy-on-wsl-sl.html" rel="alternate"></link><published>2021-11-22T00:00:00+09:00</published><updated>2021-11-22T00:00:00+09:00</updated><author><name>Akio Tomita</name></author><id>tag:tmya.github.io,2021-11-22:/miracle-linux-tips-deploy-on-wsl-sl.html</id><summary type="html">&lt;p&gt;WSL2でMIRACLE LINUXを使えるようにしよう。まずはCentOS 8.4をインストールしてから移行ツールで移行します。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; この手順では …&lt;/p&gt;</summary><content type="html">&lt;p&gt;WSL2でMIRACLE LINUXを使えるようにしよう。まずはCentOS 8.4をインストールしてから移行ツールで移行します。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; この手順では公式に用意されていない手順で行っているためきちんと動く保証はありません。人柱だと思ってください。もちろん無保証です。少なくともsystemdはWSLの都合で使えません。&lt;/p&gt;
&lt;h4&gt;手順&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;PowerShellを開く&lt;/li&gt;
&lt;li&gt;WSL2の確認と準備(不必要な事もある)&lt;/li&gt;
&lt;li&gt;CentOSの導入&lt;/li&gt;
&lt;li&gt;移行ツールを使ってのMLへの移行&lt;/li&gt;
&lt;li&gt;SLを走らせる&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;PowerShellを開く&lt;/h3&gt;
&lt;p&gt;スタートメニューの検索窓に、&lt;code&gt;powershell&lt;/code&gt;と入力してPowerShellを起動します。下から続くコマンドはすべてPowerShellのウィンドウに打ち込むかコピペしてください。また、行頭の&lt;code&gt;&amp;gt;&lt;/code&gt;はプロンプトを表すので、入力しないでください。PowerShellの画面上、行頭には&lt;code&gt;PS C:\XXXXXX\XXXX&amp;gt;&lt;/code&gt;と表示されていると思いますが、その部分を表す為に&lt;code&gt;&amp;gt;&lt;/code&gt;と表示しています。&lt;/p&gt;
&lt;h3&gt;WSL2の確認と準備(環境によっては必要が無い場合があります)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; wsl --set-default-version &lt;span class="m"&gt;2&lt;/span&gt;
Windows の仮想マシン プラットフォーム機能を有効にして、BIOS で仮想化が有効になっていることを確認してください。
詳細については、https://aka.ms/wsl2-install を参照してください
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;Windowsの機能の有効化または無効化&lt;/code&gt;で仮想マシンプラットフォームのチェックが外れていたのでチェックをして再起動しました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="仮想マシンプラットフォームの有効化" src="https://tmya.github.io/images/win_virt_plt.jpg"&gt;&lt;/p&gt;
&lt;p&gt;もう一度実行すると切り替えができました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; wsl --set-default-version &lt;span class="m"&gt;2&lt;/span&gt;
WSL &lt;span class="m"&gt;2&lt;/span&gt; との主な違いについては、https://aka.ms/wsl2 を参照してください
この操作を正しく終了しました。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;CentOSの導入&lt;/h3&gt;
&lt;p&gt;WSL公式にはCentOSが用意されていません。またCentOSの公開されているWSL向けイメージも古いものが多い状況です。その為CentOS 8.4を用意したので使ってみてください。（無保証・β）&lt;/p&gt;
&lt;p&gt;まずはCentOS 8.4のイメージをダウンロードして解凍します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Invoke-WebRequest&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="p"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmya&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;WSL-CentOS8&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;releases&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;2105&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;centos8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="n"&gt;-OutFile&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;Convert-Path&lt;/span&gt; &lt;span class="p"&gt;.)&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\\centos8.zip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Expand-Archive&lt;/span&gt; &lt;span class="n"&gt;-Path&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;Convert-Path&lt;/span&gt; &lt;span class="p"&gt;.)&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\\centos8.zip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-DestinationPath&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Convert-Path&lt;/span&gt; &lt;span class="p"&gt;.)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;CentOSを導入する為のフォルダを作成します。今回はC:\wsl\ML以下にインストールします。後程MIRACLE LINUXに移行するのでMLという名前にしています。好きな場所でも良いと思いますが、その場合は後に続くコマンドのパスを直してください。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; New-Item -ItemType Directory -Force -Path C:&lt;span class="se"&gt;\w&lt;/span&gt;sl&lt;span class="se"&gt;\M&lt;/span&gt;L
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; インポートせずに通常通りWSLでインストールする場合は%homepath%\AppData\Local\Packages\以下になる模様です。&lt;/p&gt;
&lt;p&gt;そしてWSLにインポートします。以下の様なメッセージが表示された場合はリンクに従ってパッケージをインストールしてください。表示されなければもう一度このコマンドを実行する必要はありません。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; wsl --import ML c:&lt;span class="se"&gt;\w&lt;/span&gt;sl&lt;span class="se"&gt;\M&lt;/span&gt;L .&lt;span class="se"&gt;\c&lt;/span&gt;entos8.tar
WSL &lt;span class="m"&gt;2&lt;/span&gt; を実行するには、カーネル コンポーネントの更新が必要です。詳細については https://aka.ms/wsl2kernel を参照してください
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://aka.ms/wsl2kernel"&gt;手順4 - Linux カーネル更新プログラム パッケージをダウンロードする&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Kernelのアップデート" src="https://tmya.github.io/images/win-wsl-kernel-update.jpg"&gt;&lt;/p&gt;
&lt;p&gt;もう一度実行するとエラーは表示されません。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; wsl --import ML c:&lt;span class="se"&gt;\w&lt;/span&gt;sl&lt;span class="se"&gt;\M&lt;/span&gt;L .&lt;span class="se"&gt;\c&lt;/span&gt;entos8.tar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ディストリビューション一覧を表示してみます。インポートできているようです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;  wsl -l
Linux 用 Windows サブシステム ディストリビューション:
ML &lt;span class="o"&gt;(&lt;/span&gt;既定&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;wslコマンドに&lt;code&gt;-d&lt;/code&gt;オプションと名前を与えると、そのディストリビューションで起動します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; wsl -d ML
&lt;span class="o"&gt;[&lt;/span&gt;root@PC user&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;LINUXらしいプロンプトに切り替わりましたので、LINUXコマンドで確認してみましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# cat /etc/redhat-release&lt;/span&gt;
CentOS Linux release &lt;span class="m"&gt;8&lt;/span&gt;.4.2105
&lt;span class="c1"&gt;# pwd&lt;/span&gt;
/mnt/c/Users/user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;どうやらCentOSになっているようです。カレントディレクトリはWindowsユーザのホームフォルダになっています。作業するのに分かりやすくするためLinuxのホームディレクトリに移動しておきましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# cd&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@pc ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# pwd&lt;/span&gt;
/root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;CentOSとして使用する場合はここまでの手順で完了です。&lt;/p&gt;
&lt;h3&gt;移行ツールを使ってのMLへの移行&lt;/h3&gt;
&lt;p&gt;移行ツールをダウンロードします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# curl -LO https://repo.dist.miraclelinux.net/miraclelinux/migration-tool/migrate2ml.sh&lt;/span&gt;
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
&lt;span class="m"&gt;100&lt;/span&gt; &lt;span class="m"&gt;20833&lt;/span&gt;  &lt;span class="m"&gt;100&lt;/span&gt; &lt;span class="m"&gt;20833&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;98734&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; --:--:-- --:--:-- --:--:-- &lt;span class="m"&gt;98734&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;マイグレーションツールを実行します。ブートローダーはありませんし切り替える必要がないので./migrate2ml.sh --minimalでも良いのですが、商標の入ったパッケージの切り替えを行いたいので--coreオプションにしています。そのため最後にgrub2パッケージのエラー表示がありますがおそらく大丈夫だと思います。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# bash ./migrate2ml.sh --core&lt;/span&gt;

~略~
Failed to upgrade grub2 packages
Exit.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;確認してみましょう。商標やリポジトリが切り替わっています。localeはそのうち直しましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# cat /etc/redhat-release&lt;/span&gt;
MIRACLE LINUX release &lt;span class="m"&gt;8&lt;/span&gt;.4 &lt;span class="o"&gt;(&lt;/span&gt;Peony&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# dnf repolist&lt;/span&gt;
Failed to &lt;span class="nb"&gt;set&lt;/span&gt; locale, defaulting to C.UTF-8
Last metadata expiration check: &lt;span class="m"&gt;0&lt;/span&gt;:03:08 ago on Mon Nov &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;02&lt;/span&gt;:06:52 &lt;span class="m"&gt;2021&lt;/span&gt;.
repo id                                           repo name                                                       status
ML8-AppStream                                     MIRACLE LINUX  - AppStream                                      &lt;span class="m"&gt;14445&lt;/span&gt;
ML8-BaseOS                                        MIRACLE LINUX  - BaseOS                                          &lt;span class="m"&gt;6170&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;パッケージのアップデートを行います。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# dnf -y update&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これでMIRACLE LINUXの導入はひと段落です。&lt;/p&gt;
&lt;h3&gt;SLを走らせる&lt;/h3&gt;
&lt;p&gt;我々はいつの時代にもlsをslと打ち間違える必要があるのです。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tkl.iis.u-tokyo.ac.jp/~toyoda/"&gt;豊田正史とslコマンド (Masashi Toyoda and SL command)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;導入しましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# dnf -y install git gcc make ncurses-devel&lt;/span&gt;
&lt;span class="c1"&gt;# git clone https://github.com/mtoyoda/sl.git&lt;/span&gt;
&lt;span class="c1"&gt;# cd sl&lt;/span&gt;
&lt;span class="c1"&gt;# make&lt;/span&gt;
&lt;span class="c1"&gt;# ./sl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="wslsl" src="https://tmya.github.io/images/wsl-sl.jpg"&gt;&lt;/p&gt;
&lt;p&gt;あとは作者の案内に従いバイナリを&lt;code&gt;/usr/local/bin&lt;/code&gt;に設置しましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# mv ./sl /usr/local/bin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これで&lt;code&gt;ls&lt;/code&gt;を打ち間違えるといつでもslを走らせることができます。&lt;/p&gt;</content><category term="MIRACLE LINUX"></category></entry><entry><title>Windowsからsshで接続する - MIRACLE LINUX 8.4</title><link href="https://tmya.github.io/how-to-using-ssh.html" rel="alternate"></link><published>2021-11-17T00:00:00+09:00</published><updated>2021-11-17T00:00:00+09:00</updated><author><name>Akio Tomita</name></author><id>tag:tmya.github.io,2021-11-17:/how-to-using-ssh.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;前提としてConoHaにMIRACLE LINUX 8.4を導入の記事の作業が終わっている事を想定しています。ConoHaにMIRACLE LINUX 8.4を導入する方法は …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;前提としてConoHaにMIRACLE LINUX 8.4を導入の記事の作業が終わっている事を想定しています。ConoHaにMIRACLE LINUX 8.4を導入する方法は &lt;a href="./miracle-linux-tips-deploy-on-conoha.html"&gt;こちら&lt;/a&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ConoHaのWebからコンソールを開いて作業する事はできますが、テキストの貼りつけや出力のコピー等が面倒です。手元のWindows 10パソコンからsshを使って直接サーバに接続して作業を行える環境を用意します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ssh鍵の生成&lt;/li&gt;
&lt;li&gt;ConoHaへssh鍵の登録と設定&lt;/li&gt;
&lt;li&gt;ConoHaの接続許可ポートの設定&lt;/li&gt;
&lt;li&gt;接続&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ssh鍵の生成&lt;/h3&gt;
&lt;p&gt;スタートメニューをクリックしてメニューバーの検索欄に&lt;code&gt;cmd&lt;/code&gt;と入力するとコマンドプロンプトが表示されるので、クリックして起動します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="コマンドプロンプト" src="https://tmya.github.io/images/win-start-cmd.jpg"&gt;&lt;/p&gt;
&lt;p&gt;黒い背景のウィンドウが表示されるので、下記のコマンドを入力してエンターを押します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="コンソールウィンドウ" src="https://tmya.github.io/images/win-ssh-keygen.jpg"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh-keygen -C &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; -t ed25519
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3回質問がありますが、何も入力せずそのままEnterキーを3回押します。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; 本来は鍵ファイルの流出時に不正使用を防止する為にパスワードの設定を推奨します。&lt;code&gt;Enter passphrase&lt;/code&gt;と&lt;code&gt;Enter same passphrase again&lt;/code&gt;に同じパスワードを入力します。ここでは簡略化の為に設定していません。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Generating public/private ed25519 key pair.
Enter file in which to save the key &lt;span class="o"&gt;(&lt;/span&gt;C:&lt;span class="se"&gt;\U&lt;/span&gt;sers&lt;span class="se"&gt;\X&lt;/span&gt;XXXX/.ssh/id_ed25519&lt;span class="o"&gt;)&lt;/span&gt;:
Enter passphrase &lt;span class="o"&gt;(&lt;/span&gt;empty &lt;span class="k"&gt;for&lt;/span&gt; no passphrase&lt;span class="o"&gt;)&lt;/span&gt;:
Enter same passphrase again:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;鍵生成が行われて処理結果が表示されます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Your identification has been saved in C:&lt;span class="se"&gt;\U&lt;/span&gt;sers&lt;span class="se"&gt;\X&lt;/span&gt;XXXX/.ssh/id_ed25519.
Your public key has been saved in C:&lt;span class="se"&gt;\U&lt;/span&gt;sers&lt;span class="se"&gt;\X&lt;/span&gt;XXXX/.ssh/id_ed25519.pub.
The key fingerprint is:
SHA256:F5WpHOiy7GSSTgHBNv0jJ71gLgfpNPmzQxLS9Zy47n0
The key&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s randomart image is:
+--&lt;span class="o"&gt;[&lt;/span&gt;ED25519 &lt;span class="m"&gt;256&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;--+
&lt;span class="p"&gt;|&lt;/span&gt; ..o     .  .o   &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; o   . ..o    &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; o * * o ..o     &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;. O B X . o.     &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; + B &lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;S .      &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;  + @ *  .       &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;   O B           &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt;.. E        &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;   .....         &lt;span class="p"&gt;|&lt;/span&gt;
+----&lt;span class="o"&gt;[&lt;/span&gt;SHA256&lt;span class="o"&gt;]&lt;/span&gt;-----+

C:&lt;span class="se"&gt;\U&lt;/span&gt;sers&lt;span class="se"&gt;\X&lt;/span&gt;XXXX&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;出来上がった鍵から、ConoHaに登録する鍵を表示するため次のコマンドを実行しましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;type&lt;/span&gt; .ssh&lt;span class="se"&gt;\i&lt;/span&gt;d_ed25519.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;中身が1行で表示されます。コマンドプロンプトのウィンドウは表示したままにして次のステップに進みましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIL2HnRkz2jknsAdfUSzg96ggYtKYQPgwYO1Ev0tUk3wd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;ConoHaへssh鍵の登録と設定&lt;/h3&gt;
&lt;p&gt;ConoHaのWebにログインしコンソール画面を表示します。コンソール内でログイン後、下記のコマンドを順番に実行します。なお、&lt;code&gt;echo ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIL2HnRkz2jknsAdfUSzg96ggYtKYQPgwYO1Ev0tUk3wd &amp;gt;&amp;gt; ~/.ssh/authorized_keys&lt;/code&gt;の行のうち、&lt;code&gt;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIL2HnRkz2jknsAdfUSzg96ggYtKYQPgwYO1Ev0tUk3wd&lt;/code&gt;の部分は先ほどのコマンドプロンプトで表示した鍵の値をコピーして書き換えてください。このコマンドも長いので、コンソールのテキスト送信で行うと楽です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="sshkey" src="https://tmya.github.io/images/win-type-sshpubkey.jpg"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ mkdir ~/.ssh
$ chmod &lt;span class="m"&gt;700&lt;/span&gt; ~/.ssh
$ &lt;span class="nb"&gt;echo&lt;/span&gt; ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIL2HnRkz2jknsAdfUSzg96ggYtKYQPgwYO1Ev0tUk3wd &amp;gt;&amp;gt; ~/.ssh/authorized_keys
$ chmod &lt;span class="m"&gt;600&lt;/span&gt; ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;次に、sshサーバの設定を行います。既存の設定ファイルを別名保存して公開鍵認証を有効にしてパスワード認証を禁止にしてRootでのログインを禁止にしてsshサーバを再起動する一連のコマンドです。テキスト送信へコピペする場合、&lt;code&gt;sudo&lt;/code&gt;コマンドの初回にパスワードを聞かれると複数行の貼りつけがうまくできないので、まずは&lt;code&gt;sudo true&lt;/code&gt;と実行してパスワードを入力してから5分以内にテキスト送信に貼りつけると楽です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;↑でパスワードを入力したら5分以内に↓をテキスト送信に貼りつけ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak
sudo sed -i &lt;span class="s1"&gt;&amp;#39;s/^#PubkeyAuthentication yes/PubkeyAuthentication yes/&amp;#39;&lt;/span&gt; /etc/ssh/sshd_config
sudo sed -i &lt;span class="s1"&gt;&amp;#39;s/^PasswordAuthentication yes/PasswordAuthentication no/&amp;#39;&lt;/span&gt; /etc/ssh/sshd_config
sudo sed -i &lt;span class="s1"&gt;&amp;#39;s/^PermitRootLogin yes/PermitRootLogin no/&amp;#39;&lt;/span&gt; /etc/ssh/sshd_config
sudo systemctl restart sshd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;ConoHaの接続許可ポートの設定&lt;/h3&gt;
&lt;p&gt;今度はConoHaのWeb上での作業です。ConoHaにログインするとサーバの名前が表示されているはずなので、右側の&lt;code&gt;詳細設定&lt;/code&gt;をクリックします。&lt;/p&gt;
&lt;p&gt;サーバの詳細設定画面では下にスクロールすると下部に&lt;code&gt;接続許可ポート&lt;/code&gt;の設定がありますので、&lt;code&gt;□ SSH(22)&lt;/code&gt;をクリックしてチェックマークをつけます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="接続許可ポート" src="https://tmya.github.io/images/conoha-port-open-5432.jpg"&gt;&lt;/p&gt;
&lt;p&gt;↑この図ではチェックついていませんがチェックしてください。&lt;/p&gt;
&lt;h3&gt;接続&lt;/h3&gt;
&lt;p&gt;あとはもう接続するのみです。コマンドプロンプトからsshコマンドで接続可能です。オプションには&lt;code&gt;ユーザ名&lt;/code&gt;@&lt;code&gt;IPアドレス&lt;/code&gt;を指定します。ユーザ名はMLで作成した一般ユーザ名、IPアドレスにはConoHaの詳細設定で確認できるIPアドレスです。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例:&lt;/strong&gt; ssh tmya@192.168.0.1&lt;/p&gt;
&lt;p&gt;&lt;img alt="ssh接続" src="https://tmya.github.io/images/win-ssh-connect.jpg"&gt;&lt;/p&gt;
&lt;p&gt;接続が成功するとコンソール画面と同じようにユーザ名と最後が&lt;code&gt;$&lt;/code&gt;の行が出力されます。切断は&lt;code&gt;exit&lt;/code&gt;コマンドで行います。&lt;/p&gt;</content><category term="MIRACLE LINUX"></category></entry><entry><title>micro(テキストエディタ)のインストール - MIRACLE LINUX 8.4</title><link href="https://tmya.github.io/how-to-install-micro.html" rel="alternate"></link><published>2021-11-16T00:00:00+09:00</published><updated>2021-11-16T00:00:00+09:00</updated><author><name>Akio Tomita</name></author><id>tag:tmya.github.io,2021-11-16:/how-to-install-micro.html</id><summary type="html">&lt;p&gt;viやEmacsは難しい？ではテキストエディタの&lt;a href="https://micro-editor.github.io/"&gt;micro&lt;/a&gt;をインストールしよう。&lt;/p&gt;
&lt;h3&gt;インストール&lt;/h3&gt;
&lt;p&gt;インストールはとっても簡単。2つ …&lt;/p&gt;</summary><content type="html">&lt;p&gt;viやEmacsは難しい？ではテキストエディタの&lt;a href="https://micro-editor.github.io/"&gt;micro&lt;/a&gt;をインストールしよう。&lt;/p&gt;
&lt;h3&gt;インストール&lt;/h3&gt;
&lt;p&gt;インストールはとっても簡単。2つのコマンドで完了する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ curl https://getmic.ro &lt;span class="p"&gt;|&lt;/span&gt; bash
$ sudo mv micro /usr/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;使い方&lt;/h3&gt;
&lt;h4&gt;起動方法&lt;/h4&gt;
&lt;p&gt;単体で起動すると空のエディタが立ち上がります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ micro
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;後ろにファイル名を指定するとそのファイルを開くことができます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ micro hoge.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;操作方法&lt;/h4&gt;
&lt;p&gt;ほとんどWindowsのメモ帳と同じ。カーソルキーで動かしたり文字を打てば入力できます。&lt;/p&gt;
&lt;h4&gt;保存等&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Ctrl + s&lt;/code&gt; で保存。&lt;code&gt;Ctrl + q&lt;/code&gt;で終了。&lt;code&gt;micro&lt;/code&gt;のみで起動した後、&lt;code&gt;Ctrl + s&lt;/code&gt;を押すとファイル名を聞かれるので入力してEnterキーで保存。&lt;code&gt;Ctrl + q&lt;/code&gt;を押すと変更を保存するか聞かれるので、&lt;code&gt;y&lt;/code&gt;か&lt;code&gt;n&lt;/code&gt;かキャンセルなら&lt;code&gt;Esc&lt;/code&gt;を押す。&lt;/p&gt;
&lt;p&gt;後は&lt;code&gt;micro エディタ 使い方&lt;/code&gt;で検索すると各種ショートカットが調べられると思います。&lt;/p&gt;</content><category term="MIRACLE LINUX"></category></entry><entry><title>ConoHaに導入したMIRACLE LINUX 8.4でマイクラサーバ(JAVA版 1.17.1)を建てる</title><link href="https://tmya.github.io/miracle-linux-tips-minecraft-server-conoha.html" rel="alternate"></link><published>2021-11-16T00:00:00+09:00</published><updated>2021-11-16T00:00:00+09:00</updated><author><name>Akio Tomita</name></author><id>tag:tmya.github.io,2021-11-16:/miracle-linux-tips-minecraft-server-conoha.html</id><summary type="html">&lt;p&gt;みんな大好きマインクラフト。サーバを建てるにもCentOSを選ぶとサポートが切れるまで短い今、代替となるMIRACLE LINUXを使っ …&lt;/p&gt;</summary><content type="html">&lt;p&gt;みんな大好きマインクラフト。サーバを建てるにもCentOSを選ぶとサポートが切れるまで短い今、代替となるMIRACLE LINUXを使ってマインクラフトサーバをインストールしてみよう。とりあえず動かす方法です。細かい設定などはまた別の機会に。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前提としてConoHaにMIRACLE LINUX 8.4を導入の記事の作業が終わっている事を想定していますが、記事の説明通りだとサーバのスペックが低いので快適にプレイできないと思います。お金に余裕があればCPUやメモリが強いプランを選ぶと良いでしょう。ConoHaにMIRACLE LINUX 8.4を導入する方法は &lt;a href="./miracle-linux-tips-deploy-on-conoha.html"&gt;こちら&lt;/a&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;必要な事&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;サーバのダウンロード&lt;/li&gt;
&lt;li&gt;JAVAのインストール&lt;/li&gt;
&lt;li&gt;サーバの初期設定&lt;/li&gt;
&lt;li&gt;ファイヤウォールの設定&lt;/li&gt;
&lt;li&gt;ConoHaの接続許可ポートの設定&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;マインクラフトサーバの本体をダウンロード&lt;/h3&gt;
&lt;p&gt;ConoHaのコンソールを開き、一般ユーザでログインします。まずはマインクラフトサーバを置くディレクトリを作成します。そして作業ディレクトリを作成したディレクトリに変更します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ mkdir minecraft-server
$ &lt;span class="nb"&gt;cd&lt;/span&gt; minecraft-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;コンソールが[&lt;code&gt;ユーザ名&lt;/code&gt;@&lt;code&gt;ホスト名&lt;/code&gt; minecraft-server ]$ となっていると思います。&lt;/p&gt;
&lt;p&gt;次にコンソールにコマンドを打ちMinecraftをダウンロードします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wget https://launcher.mojang.com/v1/objects/a16d67e5807f57fc4e550299cf20226194497dc2/server.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;と言ってもURLが長いので、上のコマンドをコピーしてコンソール上部の&lt;code&gt;テキスト送信&lt;/code&gt;をクリックして貼り付け、&lt;code&gt;送信&lt;/code&gt;ボタンをクリックします。&lt;/p&gt;
&lt;p&gt;&lt;img alt="テキストを張り付ける方法" src="https://tmya.github.io/images/conoha-mc-dl.jpg"&gt;&lt;/p&gt;
&lt;p&gt;そしてEnterキーを押して実行します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~~略~~  &lt;span class="s1"&gt;&amp;#39;server.jar&amp;#39;&lt;/span&gt; saved &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;43626592&lt;/span&gt;/43626592&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ダウンロードが完了したので、実行用のスクリプトを作成します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;#!&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/bash\njava -Xmx1024M -Xms1024M -jar server.jar nogui&amp;quot;&lt;/span&gt; &amp;gt; start.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; 今回のメモではサーバに512MBのメモリ(RAM)しかありませんが、Swapというメモリが足りなかった場合に使える領域が2GB程度存在します。メモリに比べて速度がとても遅いのでメモリの代わりにはなりませんが、サーバの動作というだけなら起動は可能です。また、&lt;code&gt;-Xmx1024M&lt;/code&gt;と&lt;code&gt;-Xms1024M&lt;/code&gt;はそれぞれ指定できる最低値です。これ以下の値を指定しても、自動的に1024Mが指定されたものとして起動してしまいます。&lt;/p&gt;
&lt;p&gt;先ほどと同じく、上のコマンドをコピーしてコンソール上部の&lt;code&gt;テキスト送信&lt;/code&gt;をクリックして貼り付け、&lt;code&gt;送信&lt;/code&gt;ボタンをクリックし、Enterキーを押します。&lt;/p&gt;
&lt;p&gt;start.shファイルが作成されていると思います。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ls
server.jar start.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;実行権限を付与しましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ chmod +x start.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;JAVAの実行環境をインストール&lt;/h3&gt;
&lt;p&gt;次に、サーバを実行するためのJAVAのインストールを行います。ここで&lt;code&gt;sudo&lt;/code&gt;コマンドの登場です。パスワードを聞かれるので、ログインしたユーザのパスワードを入力します。java以外にも必要なパッケージが自動でインストールされます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo dnf -y install java-latest-openjdk-headless
&lt;span class="o"&gt;[&lt;/span&gt;sudo&lt;span class="o"&gt;]&lt;/span&gt; password &lt;span class="k"&gt;for&lt;/span&gt; XXXX:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; JAVAのバージョンは複数ありますが、Minecraft1.17以降はJAVAのバージョン16以降が必要なようです。MLでは&lt;code&gt;java-latest-openjdkほにゃらら&lt;/code&gt;がバージョン16になります。因みに&lt;code&gt;java-11-openjdkほにゃらら&lt;/code&gt;だとバージョン11がインストールされます。&lt;/p&gt;
&lt;h3&gt;サーバの初期設定&lt;/h3&gt;
&lt;p&gt;とりあえず一度起動しましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ./start.sh
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;00&lt;/span&gt;:00:00&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;main/ERROR&lt;span class="o"&gt;]&lt;/span&gt;: Failed to load properties from file: server.properties
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;00&lt;/span&gt;:00:00&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;main/WARN&lt;span class="o"&gt;]&lt;/span&gt;: Failed to load eula.txt
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;00&lt;/span&gt;:00:00&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;main/INFO&lt;span class="o"&gt;]&lt;/span&gt;: You need to agree to the EULA in order to run the server. Go to eula.txt &lt;span class="k"&gt;for&lt;/span&gt; more info.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;何やらメッセージが表示されます。それぞれの行で、&lt;code&gt;server.properties&lt;/code&gt;ファイルが見当たらない、&lt;code&gt;eula.txt&lt;/code&gt;がロードできない、EULAに同意しないといけないとなっています。&lt;/p&gt;
&lt;p&gt;一旦今のファイル一覧を見てみましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ls
eula.txt logs server.jar server.properties start.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ファイルが増えています。&lt;/p&gt;
&lt;p&gt;EULAに同意するため下記のコマンドを実行します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sed -i &lt;span class="s1"&gt;&amp;#39;s/false/true/g&amp;#39;&lt;/span&gt; eula.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;サーバのポートがデフォルトだとtcpの25565番ですが、ConoHaの接続許可ポートを指定するにはAPI操作等が必要になってきます。ですので、簡単に選べる代表的なポートを拝借して5432番ポートを利用するように設定変更します。5432番は元々PostgreSQL用ですが、マインクラフトサーバを立てるにあたり同じサーバでPostgreSQLを動かす事はほとんどないと思うので影響は無いと考えていいと思います。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sed -i &lt;span class="s1"&gt;&amp;#39;s/25565/5432/g&amp;#39;&lt;/span&gt; server.properties
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;確認は下記のコマンドで可能です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ grep &lt;span class="m"&gt;5432&lt;/span&gt; server.properties
server-port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5432&lt;/span&gt;
query.port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5432&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;サーバの起動&lt;/h3&gt;
&lt;p&gt;サーバを起動しましょう。いろいろ文字が表示されます。メモリ512MBでは非常に苦しく時間がかかるので、しばし待ちましょう。今回は起動に210秒かかりました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ./start.sh
~~略~~
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;00&lt;/span&gt;:00:00&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;Server thread/INFO&lt;span class="o"&gt;]&lt;/span&gt;: Done &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;210&lt;/span&gt;.643.s&lt;span class="o"&gt;)&lt;/span&gt;! For help, &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;00&lt;/span&gt;:00:00&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;Server thread/WARN&lt;span class="o"&gt;]&lt;/span&gt;: Can&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t keep up! Is the server overloaded? Running 2885ms or &lt;span class="m"&gt;57&lt;/span&gt; ticks behind
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;無事に起動しましたが、すでにサーバがオーバーロード（つまりあっぷあっぷして苦しい）していないか？と警告が出ています。メモリ512MBでは厳しいようです。今回はこのまま進めます。&lt;/p&gt;
&lt;p&gt;ここまででサーバが立ち上がりました。早速接続を・・・と考えたくなりますが、実はポートが開いていないので接続できません。ポートを開ける為に2種類の設定を行わなければなりません。&lt;/p&gt;
&lt;p&gt;一旦&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;c&lt;/code&gt;ボタンを押して、サーバを終了させましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;^C&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;00&lt;/span&gt;:00:00&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;Server thread/INFO&lt;span class="o"&gt;]&lt;/span&gt;: Stopping server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;と表示され、サーバが終了してコンソール画面に戻ってくると思います。&lt;/p&gt;
&lt;h3&gt;ファイヤウォールの設定&lt;/h3&gt;
&lt;p&gt;1種類目はMLのファイヤウォール設定です。現在のファイヤウォールの設定を確認します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo firewall-cmd --list-all
&lt;span class="o"&gt;[&lt;/span&gt;sudo&lt;span class="o"&gt;]&lt;/span&gt; password &lt;span class="k"&gt;for&lt;/span&gt; XXXX:
public &lt;span class="o"&gt;(&lt;/span&gt;active&lt;span class="o"&gt;)&lt;/span&gt;
  target: default
  icmp-block-inversion: no
  interfaces: eth0
  sources:
  services: cockpit dhcpv6-client ssh
  ports:
  protocols:
  masquerade: no
  forward-ports:
  source-ports:
  icmp-blocks:
  rich rules:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;現在有効な設定が表示されます。現在はservicesの行にあるサービスしか外部から通信できません。今回はserviceとしてではなく、portとして、&lt;code&gt;tcp&lt;/code&gt;の&lt;code&gt;5432&lt;/code&gt;を追加し、もう一度確認しましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo firewall-cmd --add-port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5432&lt;/span&gt;/tcp
success
$ sudo firewall-cmd --list-all
public &lt;span class="o"&gt;(&lt;/span&gt;active&lt;span class="o"&gt;)&lt;/span&gt;
  target: default
  icmp-block-inversion: no
  interfaces: eth0
  sources:
  services: cockpit dhcpv6-client ssh
  ports: &lt;span class="m"&gt;5432&lt;/span&gt;/tcp
  protocols:
  masquerade: no
  forward-ports:
  source-ports:
  icmp-blocks:
  rich rules:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;ports&lt;/code&gt;行に追加されているのが確認できます。この設定は再起動すると消えてしまうので、恒久的に適用するために下記のコマンドを実行しましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo firewall-cmd --runtime-to-permanent
success
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;success&lt;/code&gt;と表示がされればOKです。&lt;/p&gt;
&lt;h3&gt;ConoHaの接続許可ポートの設定&lt;/h3&gt;
&lt;p&gt;2種類目はVPSの接続許可ポートの設定です。&lt;/p&gt;
&lt;p&gt;ConoHaのWebから&lt;a href="https://manage.conoha.jp/Service/"&gt;サーバーリストを参照&lt;/a&gt;し、ネームタグの列の作成したサーバをクリックします。&lt;/p&gt;
&lt;p&gt;&lt;img alt="サーバーリスト" src="https://tmya.github.io/images/conoha-server-list-1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;画面下部の接続許可ポートのうち、&lt;code&gt;PostgreSQL (5432)&lt;/code&gt;にチェックを入れて数秒待つと画面左下に&lt;code&gt;成功しました。&lt;/code&gt;と表示されます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="接続許可ポートにチェック" src="https://tmya.github.io/images/conoha-port-open-5432.jpg"&gt;&lt;/p&gt;
&lt;p&gt;以上で設定は完了です。&lt;/p&gt;
&lt;h3&gt;ゲームの起動と接続&lt;/h3&gt;
&lt;p&gt;マインクラフト(バージョン 1.17.1)を起動し、&lt;code&gt;マルチプレイ&lt;/code&gt;から&lt;code&gt;サーバーを追加&lt;/code&gt;をクリックします。&lt;code&gt;サーバー名&lt;/code&gt;はわかりやすい値で好きなように設定し、&lt;code&gt;サーバーアドレス&lt;/code&gt;には&lt;code&gt;ConoHaのIPv4のIPアドレス&lt;/code&gt;:5432を入力し、完了をクリックします。&lt;/p&gt;
&lt;p&gt;&lt;img alt="サーバーの追加" src="https://tmya.github.io/images/mc-add-serv.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ConoHaのIPアドレス" src="https://tmya.github.io/images/conoha-serv-ip.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; IPアドレスとポート番号の5432の間は&lt;code&gt;コロン&lt;/code&gt;という記号で、&lt;code&gt;:&lt;/code&gt;です。日本語のキーボードを使っている場合は&lt;code&gt;け&lt;/code&gt;の位置です。&lt;/p&gt;
&lt;p&gt;追加されたサーバーを選び、&lt;code&gt;サーバーに接続&lt;/code&gt;をクリックするとゲームを開始できます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="サーバーログイン後" src="https://tmya.github.io/images/mc-login.jpg"&gt;&lt;/p&gt;
&lt;p&gt;コンソール画面を見ると、ログインしたことがわかるログが表示されています。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ログインがわかるコンソール" src="https://tmya.github.io/images/conoha-mc-log.jpg"&gt;&lt;/p&gt;
&lt;p&gt;以上で完了です。&lt;/p&gt;</content><category term="MIRACLE LINUX"></category></entry><entry><title>ConoHaにMIRACLE LINUX 8.4(CUI)を導入</title><link href="https://tmya.github.io/miracle-linux-tips-deploy-on-conoha.html" rel="alternate"></link><published>2021-11-15T00:00:00+09:00</published><updated>2021-11-15T00:00:00+09:00</updated><author><name>Akio Tomita</name></author><id>tag:tmya.github.io,2021-11-15:/miracle-linux-tips-deploy-on-conoha.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;2022/03/04 追記&lt;/strong&gt;  ConoHaのテンプレートにMIRACLE LINUX 8.4が追加されたので、下記の手順を行わなくても普通にMIRACLE LINUX 8.4を選択する …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;2022/03/04 追記&lt;/strong&gt;  ConoHaのテンプレートにMIRACLE LINUX 8.4が追加されたので、下記の手順を行わなくても普通にMIRACLE LINUX 8.4を選択するだけでインストール可能です。やったね！&lt;/p&gt;
&lt;p&gt;ConoHaのVPSにて、MIRACLE LINUX(以下、ML)を使おうと思います。MLにはCentOSからの移行ツールが存在しており、CentOS Linux 8.0から8.4までであれば対応しているようです。今回はConoHaのVPSにCentOS 8.3をインストールして移行ツールを使ってMIRACLE LINUXを導入します。GUIは使わないのでCUIのみとなります。&lt;/p&gt;
&lt;h3&gt;ConoHaで新しいサーバの追加&lt;/h3&gt;
&lt;p&gt;まずはConoHaにログインをして新しいサーバの追加を行います。VPS割引きっぷは前払いで少し割引になるようですが試していません。イメージタイプはOSタブのCentOSを選びますが、デフォルトは&lt;code&gt;Steam8(64bit)&lt;/code&gt;になっているので、ドロップダウンから&lt;code&gt;8.3(64bit)&lt;/code&gt;を選びます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="サーバ追加の画面" src="https://tmya.github.io/images/conoha-add-server-1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;rootパスワードは大文字や小文字、数字と記号を混ぜないといけないので思いつかない場合は何らかのソフトで生成しましょう。&lt;a href="https://1password.com/jp/password-generator/"&gt;1passwordのジェネレータ&lt;/a&gt;でサクっと生成する方法もあります。お手持ちのマシンに&lt;code&gt;pwgen&lt;/code&gt;コマンドや&lt;code&gt;mkpasswd&lt;/code&gt;コマンドなどがあればそれで生成してもいいでしょう。&lt;/p&gt;
&lt;p&gt;セキュリティ上の懸念があるため&lt;code&gt;オプションを見る&lt;/code&gt;をクリックして、&lt;code&gt;接続許可ポート IPv4&lt;/code&gt;と&lt;code&gt;接続許可ポート IPv6&lt;/code&gt;は両方とも&lt;code&gt;全て拒否&lt;/code&gt;にしましょう。これはサーバの設定を全て終わらせてある程度セキュリティを担保してから許可に変更すると良いでしょう。&lt;/p&gt;
&lt;p&gt;&lt;img alt="オプションを見るの中身" src="https://tmya.github.io/images/conoha-option-disable-inbound-port.jpg"&gt;&lt;/p&gt;
&lt;p&gt;サーバを追加すると1分程度構築中と表示され、その後起動中になります。&lt;/p&gt;
&lt;p&gt;&lt;img alt="サーバの追加完了" src="https://tmya.github.io/images/conoha-add-server-2.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;サーバへのログイン&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ネームタグ&lt;/code&gt;から先ほど作成したサーバをクリックし、&lt;code&gt;コンソール&lt;/code&gt;をクリックすると新しいウィンドウでコンソール画面が表示されます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="コンソール" src="https://tmya.github.io/images/conoha-console.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;root&lt;/code&gt;と打ってEnterキーでログインします。パスワードを聞かれるので先ほどサーバ追加の時に指定したパスワードを入力します。パスワードはキーボードから入力しても画面上に文字が出ません。覗き見防止&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;でそうなっています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;xxx-xxx-xxx-xxx login: root
Password:
&lt;span class="o"&gt;[&lt;/span&gt;root@xxx-xxx-xxx-xxx ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;この時点ではCentOS 8.3がインストールされていることが確認できます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# cat /etc/redhat-release&lt;/span&gt;
CentOS Linux release &lt;span class="m"&gt;8&lt;/span&gt;.3.2011
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;MIRACLE LINUXへの移行ツールのダウンロードと実行&lt;/h3&gt;
&lt;p&gt;移行ツールをダウンロード&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# wget https://repo.dist.miraclelinux.net/miraclelinux/migration-tool/migrate2ml.sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;移行ツール&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;を実行するために、実行権限を付与します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# chmod +x ./migrate2ml.sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;通常の切り替えモードで移行ツールを実行します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./migrate2ml.sh --core&lt;/span&gt;

~~~~略~~~~

Core package migration is completed!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;確認してみましょう。&lt;code&gt;redhat-release&lt;/code&gt;ファイルはMIRACLE LINUXになっています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# cat /etc/redhat-release&lt;/span&gt;
MIRACLE LINUX release &lt;span class="m"&gt;8&lt;/span&gt;.4 &lt;span class="o"&gt;(&lt;/span&gt;Peony&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;パッケージのアップデートと再起動&lt;/h3&gt;
&lt;p&gt;パッケージをアップデートします。数分かかるので待ちましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# dnf -y update&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;終わったら念のため再起動しましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# reboot&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ブートローダの一番上にMIRACLE LINUXが追加されているので、数秒待つと起動します。ログイン画面が表示されたらログインしましょう。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ブートローダ" src="https://tmya.github.io/images/conoha-ml-boot.jpg"&gt;&lt;/p&gt;
&lt;p&gt;ログイン画面では次のようにMIRACLE LINUX 8.4と表示されます。以上で移行は完了です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;MIRACLE LINUX &lt;span class="m"&gt;8&lt;/span&gt;.4 &lt;span class="o"&gt;(&lt;/span&gt;Peony&lt;span class="o"&gt;)&lt;/span&gt;
Kernel &lt;span class="m"&gt;4&lt;/span&gt;.18.0-305.25.1.el8_4.x86_64 on an X86_64

xxx-xxx-xxx-xxx login:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;新規ユーザの追加&lt;/h3&gt;
&lt;p&gt;今までの作業は&lt;code&gt;root&lt;/code&gt;という名前のユーザで作業してきました。これはスーパーユーザとも言い、システム等を自由に変更できる"すごいユーザ"であるので、コマンドを打ち間違えてシステムを破壊してしまうかもしれません。一般的に作業を行う一般ユーザを作成しましょう。ユーザを作成するには&lt;code&gt;adduser&lt;/code&gt;コマンドを使います。&lt;code&gt;XXXX&lt;/code&gt;には自分のユーザ名を入力してください。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# adduser XXXX&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;特に何の出力もありませんが、ユーザの作成はできているはずです。下記のコマンドで自分の作成したユーザの行が出力されていれば大丈夫です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# grep XXXX /etc/passwd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;一般ユーザと言っても、時々システムの管理を行いたい事があると思います。その時の為に管理者としてコマンドを実行できるように&lt;code&gt;wheel&lt;/code&gt;グループに作成したユーザを追加しましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# usermod -aG wheel XXXX&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;こちらも下記のコマンドで、wheelで始まる行が出力されていれば追加されていると確認できます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# grep XXXX /etc/group&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;そして作成したユーザにはまだパスワードが設定されていません。パスワードを設定しましょう。設定したいパスワードを2回入力します。1回でないのは、もし打ち間違えているとログインできなくなってしまうので確認の為にこうなっています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# passwd XXXX&lt;/span&gt;
Changing password &lt;span class="k"&gt;for&lt;/span&gt; user XXXX.
New password:
Retype new password:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;passwd&lt;/code&gt;の後にユーザ名を付けずに実行してしまうと、今ログインしてるユーザのパスワードを変更してしまいます。このタイミングではrootユーザのパスワードを変更してしまうので気を付けてください。1行目の&lt;code&gt;Changing password for user XXXX.&lt;/code&gt;の最後に自分のユーザ名が表示されているか確認しましょう。&lt;/p&gt;
&lt;p&gt;2回とも同じパスワードを入力できているとパスワードが設定されます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;passwd: all authentication tokens updated successfully.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;一旦ログアウトして、作成したユーザでログインしてみましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;先ほど作成したユーザ名を入力してEnterキーを押しパスワードを入力してEnterキーを押します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;MIRACLE LINUX &lt;span class="m"&gt;8&lt;/span&gt;.4 &lt;span class="o"&gt;(&lt;/span&gt;Peony&lt;span class="o"&gt;)&lt;/span&gt;
Kernel &lt;span class="m"&gt;4&lt;/span&gt;.18.0-305.25.1.el8_4.x86_64 on an x86_64

xxx-xxx-xxx-xxx login: XXXX
Password:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ログインできるとコンソールの表示が先ほどまでのrootとちょっと違う形で表示されます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;XXXX@xxx-xxx-xxx-xxx ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;[&lt;code&gt;ユーザ名&lt;/code&gt;@&lt;code&gt;ホスト名&lt;/code&gt; ~]$となります。最後の$は一般ユーザであることを表しています。実は先ほどまでのrootユーザは$ではなく#でした。&lt;/p&gt;
&lt;p&gt;試しにrootユーザでない場合にどうなるか試すにはrootのホームディレクトリを覗こうとしてみるとわかります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ls /root
ls: cannot open directory &lt;span class="s1"&gt;&amp;#39;/root&amp;#39;&lt;/span&gt;: Permission denied
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Permission deniedと表示され、権限がないよと言われます。&lt;/p&gt;
&lt;p&gt;一時的にスーパーユーザとして実行するにはコマンドの先頭に&lt;code&gt;sudo&lt;/code&gt;をくっつけます。試してみましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo ls /root

We trust you have received the usual lecture from the &lt;span class="nb"&gt;local&lt;/span&gt; System
Administrator. It usually boils down to these three things:

    &lt;span class="c1"&gt;#1) Respect the privacy of others.&lt;/span&gt;
    &lt;span class="c1"&gt;#2) Think before you type.&lt;/span&gt;
    &lt;span class="c1"&gt;#3) With great power comes great responsibility.&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;sudo&lt;span class="o"&gt;]&lt;/span&gt; password &lt;span class="k"&gt;for&lt;/span&gt; XXXX:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;初回はだらだらと警告メッセージが表示されます。気を付けて使いましょうという事が書いてあるので、気になる方は&lt;a href="https://www.deepl.com/en/translator#en/ja/We%20trust%20you%20have%20received%20the%20usual%20lecture%20from%20the%20local%20System%20Administrator.%20It%20usually%20boils%20down%20to%20these%20three%20things.%0A%0ARespect%20the%20privacy%20of%20others.%0AThink%20before%20you%20type.%0AWith%20great%20power%20comes%20great%20responsibility"&gt;翻訳ソフトで調べて&lt;/a&gt;ください。&lt;/p&gt;
&lt;p&gt;ここでパスワードが要求されますが、&lt;code&gt;password for XXXX&lt;/code&gt;となっている通りrootのパスワードではなく作成した一般ユーザのパスワードを入力してください。正しいパスワードが入力されていれば&lt;code&gt;ls&lt;/code&gt;コマンドが実行されると思います。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;migrate2ml.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これは、最初に移行ツールをダウンロードしたのでそのファイルが表示されています。ダウンロードした時はrootユーザのホームディレクトリで作業していたのでここで表示されます。&lt;/p&gt;
&lt;p&gt;今後は一般ユーザでログインし、必要があれば&lt;code&gt;sudo&lt;/code&gt;を使って作業を行います。&lt;/p&gt;
&lt;h4&gt;その他 いくつか&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;os-release&lt;/code&gt;がML仕様になっています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ cat /etc/os-release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;リポジトリがMLに切り替わっており、epelはConoHaのCentOS 8.3でもともと有効のようです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ dnf repolist --enabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;参考: &lt;a href="https://blogs.mcafee.jp/shoulder-surfing-protect"&gt;社員のための抜け目ないショルダーハック対策と注意したい５つの事例&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;a href="https://repo.dist.miraclelinux.net/miraclelinux/migration-tool/"&gt;https://repo.dist.miraclelinux.net/miraclelinux/migration-tool/&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;&lt;a href="https://www.cybertrust.co.jp/miraclelinux-license-free/docs/ml84-migrationtool-manual.pdf"&gt;MIRACLE LINUX 8.4 移行ツールマニュアル&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="MIRACLE LINUX"></category></entry><entry><title>nkfのインストール - MIRACLE LINUX 8.4</title><link href="https://tmya.github.io/how-to-install-nkf.html" rel="alternate"></link><published>2021-11-09T00:00:00+09:00</published><updated>2021-11-13T00:00:00+09:00</updated><author><name>Akio Tomita</name></author><id>tag:tmya.github.io,2021-11-09:/how-to-install-nkf.html</id><summary type="html">&lt;p&gt;Network Kanji Filterをインストールしよう。&lt;/p&gt;
&lt;h3&gt;nkfパッケージはどこ&lt;/h3&gt;
&lt;p&gt;とりあえず&lt;code&gt;dnf&lt;/code&gt;でインストールしようとすると見つかりません。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Network Kanji Filterをインストールしよう。&lt;/p&gt;
&lt;h3&gt;nkfパッケージはどこ&lt;/h3&gt;
&lt;p&gt;とりあえず&lt;code&gt;dnf&lt;/code&gt;でインストールしようとすると見つかりません。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo dnf install nkf
一致した引数がありません: nkf
エラー: 一致するものが見つかりません: nkf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;MLでは&lt;a href="https://repo.dist.miraclelinux.net/miraclelinux/8-latest/PowerTools/x86_64/os/Packages-BASE/"&gt;PowerTools リポジトリと思われるURL&lt;/a&gt;に存在するが、まだ準備中(2021/11/9現在)のようで&lt;code&gt;repomd.xml&lt;/code&gt;が存在しません。つまりリポジトリの追加ができません。11月上旬には公開予定&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;とのこと。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2021/11/13 更新:&lt;/strong&gt; いつのまにか公式サイトが11月上旬から11月末という表記に変わっていてTwitterにも告知が出ていました。&lt;a href="https://twitter.com/miraclelinux/status/1459038248148209664"&gt;Twitter - みらくるちゃん &amp;amp; カーネルくん 2021/11/12 15:00&lt;/a&gt; もう少し待つしかない模様。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; CentOS Stream release 8であれば&lt;code&gt;CentOS-Stream-PowerTools.repo&lt;/code&gt;が存在していて&lt;code&gt;dnf config-manager&lt;/code&gt;ほにゃららで有効にすると簡単にリポジトリの追加とインストールが可能なので、MLもきっとそうなると信じています。&lt;/p&gt;
&lt;p&gt;&lt;img alt="nkfのパッケージ" src="https://tmya.github.io/images/nkf-2.1.4.jpg"&gt;&lt;/p&gt;
&lt;p&gt;リポジトリをミラーリングして&lt;code&gt;createrepo&lt;/code&gt;という手もあるけれどそろそろ公開してくれると期待して今回はやりません。&lt;/p&gt;
&lt;h3&gt;nkfのインストール&lt;/h3&gt;
&lt;p&gt;パッケージだけダウンロードして&lt;code&gt;localinstall&lt;/code&gt;オプションを使ってインストールしてみます。依存関係に問題がでないのでこれだけで導入可能です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ wget https://repo.dist.miraclelinux.net/miraclelinux/8-latest/PowerTools/x86_64/os/Packages-BASE/nkf-2.1.4-8.el8.x86_64.rpm
$ sudo dnf localinstall ./nkf-2.1.4-8.el8.x86_64.rpm
メタデータの期限切れの最終確認: &lt;span class="m"&gt;3&lt;/span&gt;:06:36 時間前の 2021年11月09日 09時21分29秒 に実施しました。
依存関係が解決しました。
&lt;span class="o"&gt;========================================================================================================================&lt;/span&gt;
 パッケージ            アーキテクチャー         バージョン                         リポジトリー                   &lt;span class="nv"&gt;サイズ&lt;/span&gt;
&lt;span class="o"&gt;========================================================================================================================&lt;/span&gt;
インストール:
 nkf                   x86_64                   &lt;span class="m"&gt;1&lt;/span&gt;:2.1.4-8.el8                      @commandline                   &lt;span class="m"&gt;143&lt;/span&gt; k

&lt;span class="nv"&gt;トランザクションの概要&lt;/span&gt;
&lt;span class="o"&gt;========================================================================================================================&lt;/span&gt;
インストール  &lt;span class="m"&gt;1&lt;/span&gt; パッケージ

合計サイズ: &lt;span class="m"&gt;143&lt;/span&gt; k
インストール後のサイズ: &lt;span class="m"&gt;309&lt;/span&gt; k
これでよろしいですか? &lt;span class="o"&gt;[&lt;/span&gt;y/N&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;y&lt;/code&gt;を押して&lt;code&gt;Enter&lt;/code&gt;でインストールできます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;これでよろしいですか? &lt;span class="o"&gt;[&lt;/span&gt;y/N&lt;span class="o"&gt;]&lt;/span&gt;: y
パッケージのダウンロード:
トランザクションの確認を実行中
トランザクションの確認に成功しました。
トランザクションのテストを実行中
トランザクションのテストに成功しました。
トランザクションを実行中
  準備             :                                                                                                &lt;span class="m"&gt;1&lt;/span&gt;/1
  インストール中   : nkf-1:2.1.4-8.el8.x86_64                                                                       &lt;span class="m"&gt;1&lt;/span&gt;/1
  scriptletの実行中: nkf-1:2.1.4-8.el8.x86_64                                                                       &lt;span class="m"&gt;1&lt;/span&gt;/1
  検証             : nkf-1:2.1.4-8.el8.x86_64                                                                       &lt;span class="m"&gt;1&lt;/span&gt;/1

インストール済み:
  nkf-1:2.1.4-8.el8.x86_64

完了しました!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ nkf -v
Network Kanji Filter Version &lt;span class="m"&gt;2&lt;/span&gt;.1.4 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2015&lt;/span&gt;-12-12&lt;span class="o"&gt;)&lt;/span&gt;
Copyright &lt;span class="o"&gt;(&lt;/span&gt;C&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1987&lt;/span&gt;, FUJITSU LTD. &lt;span class="o"&gt;(&lt;/span&gt;I.Ichikawa&lt;span class="o"&gt;)&lt;/span&gt;.
Copyright &lt;span class="o"&gt;(&lt;/span&gt;C&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1996&lt;/span&gt;-2015, The nkf Project.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;問題なくインストールできてます。が、バージョンを見ると現行の一つ前のバージョンですね。バグを踏まなければ使えるでしょう。&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://www.cybertrust.co.jp/miraclelinux-license-free/"&gt;MIRACLE LINUX ライセンスフリー ｜サイバートラスト&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="MIRACLE LINUX"></category></entry><entry><title>MIRACLE LINUX 8.4 メモ</title><link href="https://tmya.github.io/miracle-linux-tips.html" rel="alternate"></link><published>2021-10-25T00:00:00+09:00</published><updated>2021-10-25T00:00:00+09:00</updated><author><name>Akio Tomita</name></author><id>tag:tmya.github.io,2021-10-25:/miracle-linux-tips.html</id><summary type="html">&lt;p&gt;CentOS 8が先行き不透明な今、懐かしのMIRACLE LINUXがライセンスフリー&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;となって公開された。
とりあえず無償提供の物を使っ …&lt;/p&gt;</summary><content type="html">&lt;p&gt;CentOS 8が先行き不透明な今、懐かしのMIRACLE LINUXがライセンスフリー&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;となって公開された。
とりあえず無償提供の物を使っても2030年5月まではアップデートが提供されるらしいので期待できる。
CentOSの代替としてMIRACLE LINUX(以下 ML)を使ってみるのでその際の気付いたことをメモしていく予定。
日本発ディストリなので、ML関係の記事は日本語で書くよ。&lt;/p&gt;
&lt;h2&gt;気をつけるポイント&lt;/h2&gt;
&lt;h3&gt;パーティション構成&lt;/h3&gt;
&lt;p&gt;自動構成だと&lt;code&gt;/&lt;/code&gt;と&lt;code&gt;/home&lt;/code&gt;でパーティションが分かれている。場合によってはまとめてもいいかもしれない。&lt;/p&gt;
&lt;h3&gt;インストール後&lt;/h3&gt;
&lt;p&gt;日本語入力は&lt;code&gt;半角/英数&lt;/code&gt;や&lt;code&gt;Ctrl + Space&lt;/code&gt;を押してもすぐには出来無い。画面右上のタスクバーから日本語入力に切り替えると、キーボードでの切り替えが可能になる。（公式にも書いてある）&lt;/p&gt;
&lt;h2&gt;やってみたこと一覧&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;pyenv, pipenvの導入&lt;/li&gt;
&lt;li&gt;GnuPGの導入&lt;/li&gt;
&lt;li&gt;Google Chromeの導入&lt;/li&gt;
&lt;li&gt;GNOME Classicへの切り替え&lt;/li&gt;
&lt;li&gt;Cockpitの導入&lt;/li&gt;
&lt;li&gt;VirtualBoxの導入&lt;/li&gt;
&lt;li&gt;MIRACLE LINUX on WSL2&lt;/li&gt;
&lt;li&gt;VSCodeの導入&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;VirtualBoxでやったこと&lt;/h3&gt;
&lt;p&gt;元のWindows10マシンにSSDを追加してMLをインストールし、物理SSDにアクセスするvmdkを用意する。あとはVirtualBoxにそのvmdkを追加するとWindows10が起動する。なおライセンスに注意。
&lt;img alt="Windows10 on MIRACLE LINUX" src="https://tmya.github.io/images/ml_win_d.png"&gt;&lt;/p&gt;
&lt;h2&gt;気付いたこと&lt;/h2&gt;
&lt;h3&gt;マスコット画像&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;/usr/share/backgrounds&lt;/code&gt; にみらくるちゃんとカーネルくんの背景画像が存在する。
&lt;img alt="みらくるちゃんとカーネルくん" src="https://tmya.github.io/images/miracle_kernel.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;ちょっとしたメモ&lt;/h3&gt;
&lt;h4&gt;ホームディレクトリのフォルダ名を英語にする。&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;C xdg-user-dirs-gtk-update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;RDPサーバを動かす&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://www.cybertrust.co.jp/blog/linux-oss/linux/miraclelinux84-repository.html"&gt;ここ&lt;/a&gt;を参考にEPELを有効にした後下記のコマンドを実行する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo dnf install xrdp tigervnc-server
$ sudo systemctl start xrdp
$ sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; xrdp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;GNOME classicで使いたい場合は追加で下記のコマンドを実行する。元に戻す場合は&lt;code&gt;/etc/sysconfig/desktop&lt;/code&gt;を削除の事。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo sh -c &lt;span class="s1"&gt;&amp;#39;echo &amp;quot;PREFERRED=env GNOME_SHELL_SESSION_MODE=classic gnome-session --session gnome-classic&amp;quot; &amp;gt; /etc/sysconfig/desktop&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;C# sdkのインストール&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo dnf install dotnet-sdk-5.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://www.cybertrust.co.jp/miraclelinux-license-free/"&gt;MIRACLE LINUX ライセンスフリー&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="MIRACLE LINUX"></category></entry></feed>